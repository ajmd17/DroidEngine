// Apex 3D material header for shaders

uniform int Material_SpecularTechnique;
uniform int Material_PerPixelLighting;
uniform float Material_SpecularExponent;
uniform float Material_Shininess;
uniform float Material_Roughness;
uniform float Material_Metalness;

uniform int Material_HasDiffuseMap;
uniform int Material_HasNormalMap;
uniform int Material_HasSpecularMap;
uniform int Material_HasHeightMap;
uniform int Material_HasEnvironmentMap;

uniform vec4 Env_FogColor;
uniform float Env_FogStart;
uniform float Env_FogEnd;

uniform vec4 Material_AmbientColor;
uniform vec4 Material_DiffuseColor;
uniform vec4 Material_SpecularColor;
uniform float Material_AlphaDiscard;

uniform sampler2D Material_DiffuseMap;
uniform sampler2D Material_NormalMap;
uniform sampler2D Material_SpecularMap;
uniform sampler2D Material_HeightMap;
uniform samplerCube Material_EnvironmentMap;


float CalculateFog(vec3 worldPos, vec3 camPos, float fogStart, float fogEnd)
{
	float dist = distance(worldPos, camPos);

	float fogFactor = (fogEnd - dist)/(fogEnd - fogStart);
	fogFactor = clamp(fogFactor, 0.0, 1.0);
	return mix(0.0, 1.0, 1.0-fogFactor);
}

vec3 CalculateFogLinear(vec3 inColor, vec3 toColor, vec3 worldPos, vec3 camPos, float fogStart, float fogEnd)
{
	float dist = distance(worldPos, camPos);

	float fogFactor = (fogEnd - dist)/(fogEnd - fogStart);
	fogFactor = clamp(fogFactor, 0.0, 1.0);
	return mix(inColor, toColor, 1.0-fogFactor);
}

vec4 CalculateFogLinear(vec4 inColor, vec4 toColor, vec3 worldPos, vec3 camPos, float fogStart, float fogEnd)
{
	float dist = distance(worldPos, camPos);

	float fogFactor = (fogEnd - dist)/(fogEnd - fogStart);
	fogFactor = clamp(fogFactor, 0.0, 1.0);
	return mix(inColor, toColor, 1.0-fogFactor);
}

vec3 CalculateFog(vec3 inColor, vec3 toColor, vec3 worldPos, vec3 camPos, float fogStart, float fogEnd)
{
	float dist = distance(worldPos, camPos);

	float density = 0.003;
	float fogFactor = 1.0 / exp(dist * density);
	return mix(inColor, toColor, 1.0-fogFactor);
}

vec4 CalculateFog(vec4 inColor, vec4 toColor, vec3 worldPos, vec3 camPos, float fogStart, float fogEnd)
{
	float dist = distance(worldPos, camPos);

	float density = 0.003;
	float fogFactor = 1.0 / exp(dist * density);
	vec4 color = mix(inColor, toColor, 1.0-fogFactor);
	color.a = inColor.a;
	return color;
}

vec3 ReflectionVector(vec3 n, vec3 worldPos, vec3 camPos)
{
	vec3 i = normalize(worldPos - camPos);
	return reflect(i, n);
}